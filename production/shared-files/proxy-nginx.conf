events {
  worker_connections  4096;  ## Default: 1024
}

http {
    underscores_in_headers on;

    # Redirect non-ssl to ssl
    # and drop www if present
    server {
        listen              80;
        server_name www.34.129.127.168 34.129.127.168#update to remove localhost name
        return 301 https://34.129.127.168$request_uri; #replace localhost with domain name of server
    }

    # Drop www if present in https connections
    server { # This new server will watch for traffic on 443
        listen              443 ssl;
        server_name         www.34.129.127.168; #replace localhost with domain name of server
        ssl_certificate     /etc/nginx/cert.crt;
        ssl_certificate_key /etc/nginx/key.key;
        underscores_in_headers on;
        return 301 https://34.129.127.168$request_uri; #replace localhost with domain name of server
    }

    # We have a direct ssl connection to the domain name...
    # Route requests to internal servers
    server {
        listen              443 ssl;
        server_name         34.129.127.168; #replace localhost with domain name of server
        ssl_certificate     /etc/nginx/cert.crt;
        ssl_certificate_key /etc/nginx/key.key;

        # All api requests go to rails server
        location /api {
          proxy_set_header        Host $host;
          proxy_set_header        X-Real-IP $remote_addr;
          proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header        X-Forwarded-Proto $scheme;

          proxy_pass          http://apiserver:3000;
          proxy_read_timeout  90;
        }

        # anything else (the static files)
        location / {
          proxy_set_header        Host $host;
          proxy_set_header        X-Real-IP $remote_addr;
          proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header        X-Forwarded-Proto $scheme;

          proxy_pass          http://webserver:80;
          proxy_read_timeout  90;
        }
    }
}
